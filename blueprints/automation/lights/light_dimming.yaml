blueprint:
  name: Lights dimming
  description: Dim light(s) gradually between a start and end time.
  domain: automation
  
  input:
    # Brightness input
    start_brightness:
      name: Start Brightness.
      description: The start brighness.
      default: 255
      selector:
        number:
          min: 1
          max: 255
    end_brightness:
      name: End Brightness.
      description: The end brightness.
      default: 38
      selector:
        number:
          min: 1
          max: 255

    # Dim timing inputs          
    dim_start_time:
      name: Dim start time.
      description: Start time of dimming lights on lights.
      selector:
        # TODO: It would be nice to have configured defaults for time.
        time:
    dim_end_time:
      name: Dim end time.
      description: End time of dimming lights on lights.
      selector:
        # TODO: It would be nice to have configured defaults for time.
        time:

    # Light to dim
    output_light:
      name: Output Light
      description: Light to turn on when coming home.
      selector:
        entity:
          domain: light

variables:
  time_fmt: "%H:%M:%S"
  day_fmt: "%Y-%m-%d"
  date_fmt: "{{day_fmt + ' ' + time_fmt}}"

  day_str: "{{now().strftime(day_fmt)}}"

  input_start: !input dim_start_time
  start_time_string: "{{day_str + ' ' + input_start}}"
  start_stamp: "{{as_timestamp(strptime(start_time_string, date_fmt))}}"

  input_end: !input dim_end_time
  end_time_string: "{{day_str + ' ' + input_end}}"
  end_stamp: "{{as_timestamp(strptime(end_time_string, date_fmt))}}"
  
  # For now we have a hardcoded morning 'reset'
  morning_time_string: "{{day_str + ' 06:00:00'}}"
  morning_stamp: "{{as_timestamp(strptime(morning_time_string, date_fmt))}}"
  
  now_stamp: "{{as_timestamp(now())}}"
  
  light_name: !input output_light
  
  current: "{{ (state_attr(light_name, 'brightness') or 0) | round}}"
  start_brtns: !input start_brightness
  end_brtns: !input end_brightness
  diff: "{{end_brtns | int - start_brtns | int}}"

  t_diff: '{{(end_stamp - start_stamp)}}'
  transition_time: >
    {% if now_stamp > end_stamp %}
      {{(end_stamp - now_stamp) | int}}
    {% else %}
      0
    {% endif %}

  output_light_str: !input output_light
  
  overwrite_brtns: "{{trigger is defined and trigger.platform == 'state'}}"
  
  # Let's calculate the start brightness
  enable_brtns: >
    {% if not overwrite_brtns %}
      0
    {% elif now_stamp <= start_stamp %}
      {{start_brtns}}
    {% elif now_stamp >= end_stamp %}
      {{end_brtns}}
    {% elif now_stamp < morning_stamp %}
      {{end_brtns}}
    {% else %}
      {{start_brtns | int + (now_stamp - start_stamp) / t_diff * diff}}
    {% endif %}

# We either start at the dim start time, or whenever the light is enabled
# After the dim start time.
trigger:
- platform: time
  at: !input dim_start_time
- platform: state
  entity_id: !input output_light
  to: 'on'  
  
condition:
- condition: state
  entity_id: !input output_light
  state: 'on'
- condition: or
  conditions:
    - condition: template
      value_template: "{{now_stamp >= start_stamp}}"
    - condition: time
      before: "06:00:00"

action:
# We always set the light on the enable brightness
- service: logbook.log
  data:
    name: "Dim Blueprint"
    message: "Calling dim with end: {{end_brtns}}, delta {{t_diff}} {{trigger.platform}}"

- service: light.turn_on
  entity_id: !input output_light
  data:
    brightness: "{{end_brtns}}"
    transition: '{{transition_time}}'

- condition: template
  value_template: '{{overwrite_brtns}}'
  
- service: logbook.log
  data:
    name: "Dim Blueprint"
    message: "Calling dim with: {{overwrite_btns}} - start: {{enable_brtns}}"

# First overwrite the light brightness, then restart the transition
# This might not work without a delay?
- service: light.turn_on
  entity_id: !input output_light
  data:
    brightness: '{{enable_brtns}}'

- delay: '00:00:02'
- service: light.turn_on
  entity_id: !input output_light
  data:
    brightness: "{{end_brtns}}"
    transition: '{{transition_time | int}}'